// Use the jaxb plugin to convert the Oozie XSD schemas into Java classes
// https://github.com/jacobono/gradle-jaxb-plugin
plugins {
  id 'com.github.jacobono.jaxb' version '1.3.5'
  id 'com.jfrog.bintray' version '1.6'
  id 'eclipse'
  id 'groovy'
  id 'java'
  id 'idea'
  id 'maven-publish'
}

// The group will be overriden in LinkedIn builds
group=rootProject.group

repositories {
  mavenCentral()
}

// The LinkedIn build system automatically adds a task for checking code style. Since this project
// generates Java code, disable the checkstyle task since the generated code fails the style rules.
if (project.tasks.findByName("checkstyleMain") != null) {
  project.tasks["checkstyleMain"].enabled = false
}

dependencies {
  // Dependencies necessary to use the xjc task. We need 2.2.11 version to allow java style syntax in the workflow.xjb file.
  jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.11'
  jaxb 'com.sun.xml.bind:jaxb-impl:2.2.11'
  jaxb 'com.sun.xml.bind:jaxb-core:2.2.11'
  jaxb 'javax.xml.bind:jaxb-api:2.2.11'

  // Dependencies necessary to use the custom bindings file to add the XmlSeeAlso annotations
  jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:0.9.5"
  jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.0.2"
  jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.9.5"
}

jaxb {
  bindings = ["workflow.xjb"]
  bindingsDir = "oozie-jaxb/src/main/bindings"
  episodesDir = "oozie-jaxb/schema/episodes/workflow"
  xsdDir = "oozie-jaxb/src/main/xsd/workflow"

  xjc {
    args = ["-Xannotate"]
    generatePackage = "com.linkedin.gradle.oozie.xsd.workflow"
    taskClassname = "org.jvnet.jaxb2_commons.xjc.XJC2Task"
  }
}

// Unfortunately Oozie has a number of schema files, each of which define elements with the same
// name. We need to separate the XSD files into different directories and make a separate call to
// xjc for each file or the output java files will stomp on each other.
task('hive-xjc', type: GradleBuild) {
  buildFile = "build-hive.gradle"
  tasks = ["xjc"]
}

task('shell-xjc', type: GradleBuild) {
  buildFile = "build-shell.gradle"
  tasks = ["xjc"]
}

task('spark-xjc', type: GradleBuild) {
  buildFile = "build-spark.gradle"
  tasks = ["xjc"]
}

compileJava.dependsOn 'spark-xjc'
compileJava.dependsOn 'hive-xjc'
compileJava.dependsOn 'shell-xjc'
compileJava.dependsOn xjc

// Maven publishing setup necessary for linking Bintray to JCenter
publishing {
  publications {
    oozieJaxbPublication(MavenPublication) {
      from components.java
      groupId rootProject.group
      artifactId project.name
      version project.version
    }
  }
}

// Make sure we don't accidentally publish a SNAPSHOT version
bintrayUpload { task ->
  doFirst {
    if (version.endsWith("SNAPSHOT")) {
      throw new GradleException("Cannot publish SNAPSHOT versions")
    }
  }
}

// Configuration for uploading to Bintray
if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayApiKey')) {
  bintray {
    dryRun = false
    user = project.bintrayUser 
    key = project.bintrayApiKey
    publications = ['oozieJaxbPublication']

    pkg {
      desc = 'LinkedIn Gradle Plugin and DSL for the Apache Hadoop Ecosystem'
      labels = ['azkaban', 'gradle', 'hadoop', 'hadoopdsl', 'linkedin']
      licenses = ['Apache-2.0']
      name = 'linkedin-gradle-plugin-for-apache-hadoop'
      repo = 'maven'

      issueTrackerUrl = 'https://github.com/linkedin/linkedin-gradle-plugin-for-apache-hadoop/issues'
      vcsUrl = 'https://github.com/linkedin/linkedin-gradle-plugin-for-apache-hadoop'
      websiteUrl = 'https://github.com/linkedin/linkedin-gradle-plugin-for-apache-hadoop'

      version {
        name = project.version
      }
    }
  }
}
