plugins {
  id 'eclipse'
  id 'java'
  id 'idea'
}

// The group will be overriden in LinkedIn builds
group=rootProject.group

// Forces the gradle wrapper to download Gradle if it needs to do so. This is needed to
// ensure consistent internal LinkedIn builds.
task forceGradlew(type: Exec) {
  commandLine "${project.projectDir}/../gradlew", "-v"
}

// Create an initial task that sets up the directories for a new test run.
task initTestCases() {
  dependsOn ":li-hadoop-plugin:build";
  dependsOn forceGradlew;
  description = "Hadoop DSL task to prepare the test cases";
  group = "Hadoop DSL Tests";
}

// Helper function to determine the location of the li-hadoop-plugin jars. LinkedIn internal builds
// set a different build directory, so we allow overriding the location via a project property.
def buildLiPluginDir(Project project) {
  return project.hasProperty("overrideLiPluginTestDir") ? project.overrideLiPluginTestDir : project.liPluginTestDir;
}

// Helper function to determine the location of the Hadoop Plugin jars. LinkedIn internal builds
// set a different build directory, so we allow overriding the location via a project property.
def buildPluginDir(Project project) {
  return project.hasProperty("overridePluginTestDir") ? project.overridePluginTestDir : project.pluginTestDir;
}

// Test for including the sources zip and scmMetadata in the Hadoop zip and building the CRT zip.
task runHadoopZipTest(type: GradleBuild, dependsOn: initTestCases) {
  String liPluginDir = buildLiPluginDir(project);
  String pluginDir = buildPluginDir(project);

  buildFile = "buildZipsCRT.gradle";
  startParameter.projectProperties.put("liPluginTestDir", liPluginDir);
  startParameter.projectProperties.put("pluginTestDir", pluginDir);
  startParameter.projectProperties.put("version", project.version);
  tasks = ['buildHadoopZips'];
}

test.dependsOn runHadoopZipTest
